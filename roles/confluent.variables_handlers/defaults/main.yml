kerberos:
  keytab_dir: /etc/security/keytabs

### Version of Confluent Platform to install
confluent_package_version: 5.4.6

confluent_full_package_version: "{{ confluent_package_version + '-1' }}"
confluent_package_redhat_suffix: "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"
confluent_package_debian_suffix: "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"

confluent:
  support:
    customer_id: anonymous
    metrics_enabled: true

jolokia_enabled: true
jolokia_jar_path: /opt/jolokia/jolokia.jar
zookeeper_jolokia_enabled: "{{jolokia_enabled}}"
zookeeper_jolokia_port: 7770
kafka_broker_jolokia_enabled: "{{jolokia_enabled}}"
kafka_broker_jolokia_port: 7771
schema_registry_jolokia_enabled: "{{jolokia_enabled}}"
schema_registry_jolokia_port: 7772
kafka_connect_jolokia_enabled: "{{jolokia_enabled}}"
kafka_connect_jolokia_port: 7773
ksql_jolokia_enabled: "{{jolokia_enabled}}"
ksql_jolokia_port: 7774
kafka_rest_jolokia_enabled: "{{jolokia_enabled}}"
kafka_rest_jolokia_port: 7775

jmxexporter_enabled: false
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar
zookeeper_jmxexporter_enabled: "{{jmxexporter_enabled}}"
zookeeper_jmxexporter_config_path: /opt/prometheus/zookeeper.yml
zookeeper_jmxexporter_port: 8079
kafka_broker_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_broker_jmxexporter_config_path: /opt/prometheus/kafka.yml
kafka_broker_jmxexporter_port: 8080


fips_enabled: false
fips_jar_path: /usr/share/java/kafka/bc-fips-1.0.1.jar
fips_provider_class: org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider
pkcs12_enabled: "{{ true if fips_enabled|bool else false }}"

custom_log4j: true
custom_yum_repofile: false
custom_apt_repo: false
kerberos_configure: true

rbac_enabled: false

confluent_server_enabled: true

health_checks_enabled: true
zookeeper_health_check_command: "exec 42<>/dev/tcp/127.0.0.1/{{zookeeper.properties.clientPort}}; echo -e 'srvr' >&42; cat <&42"

common_role_completed: false

proxy_env: {}

# Other options: kerberos, plain, scram
sasl_protocol: none

ssl_enabled: false
ssl_mutual_auth_enabled: false

regenerate_ca: true
regenerate_keystore_and_truststore: true
certs_updated: false

ssl_provided_keystore_and_truststore: false
ssl_custom_certs: false
# With self_signed on and ssl_enabled off, self_signed var should not get honored
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"
ssl_self_signed_ca_cert_filename: snakeoil-ca-1.crt
ssl_self_signed_ca_key_filename: snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123

zookeeper_user: "{{zookeeper_default_user}}"
zookeeper_group: "{{zookeeper_default_group}}"
zookeeper:
  properties:
    clientPort: 2181
  log4j_file: /etc/kafka/zookeeper_log4j.properties
  jaas_file: /etc/kafka/zookeeper_jaas.conf

kafka_broker_default_listeners:
  external:
    name: "{{ 'EXTERNAL' if kafka_broker_configure_additional_brokers|bool else 'DEFAULT' }}"
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

kafka_broker_custom_listeners:
  internal:
    name: INTERNAL
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

kafka_broker_configure_additional_brokers: true
kafka_broker_listeners: "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_additional_brokers|bool else  kafka_broker_default_listeners}}"
kafka_broker_inter_broker_listener_name: "{{ 'internal' if kafka_broker_configure_additional_brokers|bool else 'external' }}"

# Uses custom filter to create a list of all sasl_protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}"

kafka_broker_user: "{{kafka_broker_default_user}}"
kafka_broker_group: "{{kafka_broker_default_group}}"
kafka_broker_truststore_path: "/var/ssl/private/kafka_broker.truststore.jks"
kafka_broker_keystore_path: "/var/ssl/private/kafka_broker.keystore.jks"
kafka_broker_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_broker_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_broker_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}"
kafka_broker:
  log4j_file: /etc/kafka/kafka_server_log4j.properties
  jaas_file: /etc/kafka/kafka_server_jaas.conf
kafka_broker_schema_validation_enabled: false

schema_registry_user: "{{schema_registry_default_user}}"
schema_registry_group: "{{schema_registry_default_group}}"
schema_registry_listener_port: 8081
schema_registry_ssl_enabled: "{{ssl_enabled}}"
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"
schema_registry_truststore_path: "/var/ssl/private/schema_registry.truststore.jks"
schema_registry_keystore_path: "/var/ssl/private/schema_registry.keystore.jks"
schema_registry_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
schema_registry_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
schema_registry_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
schema_registry_kafka_listener_name: external
schema_registry:
  log4j_file: /etc/schema-registry/schema_registry_log4j.properties

kafka_rest_user: "{{kafka_rest_default_user}}"
kafka_rest_group: "{{kafka_rest_default_group}}"
kafka_rest_port: 8082
kafka_rest_ssl_enabled: "{{ssl_enabled}}"
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"
kafka_rest_truststore_path: "/var/ssl/private/kafka_rest.truststore.jks"
kafka_rest_keystore_path: "/var/ssl/private/kafka_rest.keystore.jks"
kafka_rest_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_rest_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_rest_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}"
kafka_rest_kafka_listener_name: external
kafka_rest:
  log4j_file: /etc/kafka-rest/kafka-rest_log4j.properties

kafka_connect_user: "{{kafka_connect_default_user}}"
kafka_connect_group: "{{kafka_connect_default_group}}"
kafka_connect_rest_port: 8083
kafka_connect_ssl_enabled: "{{ssl_enabled}}"
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"
kafka_connect_truststore_path: "/var/ssl/private/kafka_connect.truststore.jks"
kafka_connect_keystore_path: "/var/ssl/private/kafka_connect.keystore.jks"
kafka_connect_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_connect_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_connect_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}"
kafka_connect_kafka_listener_name: external
kafka_connect:
  log4j_file: /etc/kafka/connect_distributed_log4j.properties

ksql_user: "{{ksql_default_user}}"
ksql_group: "{{ksql_default_group}}"
ksql_listener_port: 8088
ksql_ssl_enabled: "{{ssl_enabled}}"
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"
ksql_truststore_path: "/var/ssl/private/ksql.truststore.jks"
ksql_keystore_path: "/var/ssl/private/ksql.keystore.jks"
ksql_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
ksql_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
ksql_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}"
ksql_kafka_listener_name: external
ksql:
  log4j_file: /etc/ksql/ksql-server_log4j.properties
  jaas_file: /etc/ksql/ksql-server_jaas.conf

control_center_user: "{{control_center_default_user}}"
control_center_group: "{{control_center_default_group}}"
control_center_port: 9021
control_center_listener_hostname: "0.0.0.0"
control_center_ssl_enabled: "{{ssl_enabled}}"
control_center_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"
control_center_truststore_path: "/var/ssl/private/control_center.truststore.jks"
control_center_keystore_path: "/var/ssl/private/control_center.keystore.jks"
control_center_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
control_center_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
control_center_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}"
control_center_kafka_listener_name: external
control_center:
  log4j_file: /etc/confluent-control-center/control-center_log4j.properties

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret
