---
# More zookeeper variables are defined in the variables role

### Boolean to reconfigure Zookeeper's logging with RollingFileAppender and log cleanup
zookeeper_custom_log4j: "{{ custom_log4j }}"

### Root logger within Zookeeper's log4j config. Only honored if zookeeper_custom_log4j: true
zookeeper_log4j_root_logger: INFO, stdout, zkAppender

### Max number of log files generated by Zookeeper. Only honored if zookeeper_custom_log4j: true
zookeeper_max_log_files: 10

### Max size of a log file generated by Zookeeper. Only honored if zookeeper_custom_log4j: true
zookeeper_log_file_size: 100MB

### Boolean to enable logredactor for zookeeper. Defaults to logredactor_enabled. Works only when zookeeper_custom_log4j is set to true
zookeeper_logredactor_enabled: "{{ logredactor_enabled }}"

### Location of the zookeeper logredactor rules file on the control node. This'll be copied to zookeeper_logredactor_rule_path on the zookeeper node. 
zookeeper_logredactor_rule_path_local: "{{ logredactor_rule_path_local }}"

### Full path and name of the rules file on zookeeper node. This is the location which will be referenced in the log4j property file when defining the redactor appender.
zookeeper_logredactor_rule_path: "{{ logredactor_rule_path }}"

### URL address that contains or redirects to the redaction rules. If not "", this will be used to fetch rules. zookeeper_logredactor_rule_path will be ignored.
zookeeper_logredactor_rule_url: "{{ logredactor_rule_url }}"

### If present, it's used to specify a time in ms for how often the file system or URL of the policy rules will be checked for changes. If set to 0 (default), the policy rules will only be read once at startup.
zookeeper_logredactor_policy_refresh_interval: 7000

### List of loggers to redact. This is specified alongside the user defined redactor name and appenderRefs to be used in redactor definition.  
zookeeper_logredactor_logger_specs_list:
  - { logger_name: "log4j.rootLogger", appenderRefs: "zkAppender", redactor_name: "redactor1" }

zookeeper_java_args:
  - "{% if zookeeper_ssl_enabled|bool %}-Djdk.tls.ephemeralDHKeySize=2048{% endif %}"
  - "{% if zookeeper_client_authentication_type in ['kerberos', 'digest'] or zookeeper_quorum_authentication_type in ['kerberos', 'digest', 'digest_over_tls'] %}-Djava.security.auth.login.config={{zookeeper.jaas_file}}{% endif %}"
  - "{% if zookeeper_jolokia_enabled|bool %}-javaagent:{{jolokia_jar_path}}=config={{zookeeper_jolokia_config}}{% endif %}"
  - "{% if zookeeper_jmxexporter_enabled|bool %}-javaagent:{{jmxexporter_jar_path}}={{zookeeper_jmxexporter_port}}:{{zookeeper_jmxexporter_config_path}}{% endif %}"

### Custom Java Args to add to the Zookeeper Process
zookeeper_custom_java_args: ""

zookeeper_final_java_args: "{{ zookeeper_java_args + [ zookeeper_custom_java_args ] }}"

# For following dictionaries, Key/Value Pairs with empty values will not be written into override.conf

### Overrides to the Service Section of Zookeeper Systemd File. This variable is a dictionary.
zookeeper_service_overrides:
  User: "{{ zookeeper_user if zookeeper_user != zookeeper_default_user else '' }}"
  Group: "{{ zookeeper_group if zookeeper_group != zookeeper_default_group else '' }}"
  ExecStart: "{% if installation_method == 'archive' %}{{ zookeeper.server_start_file }} {{ zookeeper.config_file }}{% endif %}"

### Environment Variables to be added to the Zookeeper Service. This variable is a dictionary.
zookeeper_service_environment_overrides:
  KAFKA_HEAP_OPTS: "-Xmx1g"
  KAFKA_OPTS: "{{ zookeeper_final_java_args | confluent.platform.java_arg_build_out }}"
  KAFKA_LOG4J_OPTS: "{% if zookeeper_custom_log4j|bool %}-Dlog4j.configuration=file:{{zookeeper.log4j_file}}{% endif %}"
  # Remove trailing slash if there is one
  LOG_DIR: "{{ zookeeper_log_dir|regex_replace('\\/$', '') }}"

### Overrides to the Unit Section of Zookeeper Systemd File. This variable is a dictionary.
zookeeper_service_unit_overrides:

### Time in seconds to wait before starting Zookeeper Health Checks.
zookeeper_health_check_delay: 5
